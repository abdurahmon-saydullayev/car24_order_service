// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package order_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MechanicServiceClient is the client API for MechanicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MechanicServiceClient interface {
	Create(ctx context.Context, in *CreateMechanic, opts ...grpc.CallOption) (*Mechanic, error)
	GetByID(ctx context.Context, in *MechanicPK, opts ...grpc.CallOption) (*Mechanic, error)
	Delete(ctx context.Context, in *MechanicPK, opts ...grpc.CallOption) (*empty.Empty, error)
}

type mechanicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMechanicServiceClient(cc grpc.ClientConnInterface) MechanicServiceClient {
	return &mechanicServiceClient{cc}
}

func (c *mechanicServiceClient) Create(ctx context.Context, in *CreateMechanic, opts ...grpc.CallOption) (*Mechanic, error) {
	out := new(Mechanic)
	err := c.cc.Invoke(ctx, "/order_service.MechanicService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mechanicServiceClient) GetByID(ctx context.Context, in *MechanicPK, opts ...grpc.CallOption) (*Mechanic, error) {
	out := new(Mechanic)
	err := c.cc.Invoke(ctx, "/order_service.MechanicService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mechanicServiceClient) Delete(ctx context.Context, in *MechanicPK, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/order_service.MechanicService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MechanicServiceServer is the server API for MechanicService service.
// All implementations must embed UnimplementedMechanicServiceServer
// for forward compatibility
type MechanicServiceServer interface {
	Create(context.Context, *CreateMechanic) (*Mechanic, error)
	GetByID(context.Context, *MechanicPK) (*Mechanic, error)
	Delete(context.Context, *MechanicPK) (*empty.Empty, error)
	mustEmbedUnimplementedMechanicServiceServer()
}

// UnimplementedMechanicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMechanicServiceServer struct {
}

func (UnimplementedMechanicServiceServer) Create(context.Context, *CreateMechanic) (*Mechanic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMechanicServiceServer) GetByID(context.Context, *MechanicPK) (*Mechanic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedMechanicServiceServer) Delete(context.Context, *MechanicPK) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMechanicServiceServer) mustEmbedUnimplementedMechanicServiceServer() {}

// UnsafeMechanicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MechanicServiceServer will
// result in compilation errors.
type UnsafeMechanicServiceServer interface {
	mustEmbedUnimplementedMechanicServiceServer()
}

func RegisterMechanicServiceServer(s grpc.ServiceRegistrar, srv MechanicServiceServer) {
	s.RegisterService(&MechanicService_ServiceDesc, srv)
}

func _MechanicService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMechanic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MechanicServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.MechanicService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MechanicServiceServer).Create(ctx, req.(*CreateMechanic))
	}
	return interceptor(ctx, in, info, handler)
}

func _MechanicService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MechanicPK)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MechanicServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.MechanicService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MechanicServiceServer).GetByID(ctx, req.(*MechanicPK))
	}
	return interceptor(ctx, in, info, handler)
}

func _MechanicService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MechanicPK)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MechanicServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_service.MechanicService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MechanicServiceServer).Delete(ctx, req.(*MechanicPK))
	}
	return interceptor(ctx, in, info, handler)
}

// MechanicService_ServiceDesc is the grpc.ServiceDesc for MechanicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MechanicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order_service.MechanicService",
	HandlerType: (*MechanicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MechanicService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _MechanicService_GetByID_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MechanicService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mechanic_service.proto",
}
